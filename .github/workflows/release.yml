name: Release NuGet

on:
  push:
    branches: [ main ]

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write

    env:
      NUGET_API_KEY: ${{ secrets.GITHUB_TOKEN }}
      VERSION: "2022.5.747.0"  

    steps:
      # 1. Checkout
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Setup .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      # 3. Restaurar dependencias
      - name: Restore dependencies
        run: dotnet restore UPTSiteTests/UPTSiteTests.csproj

      # 4. Build
      - name: Build project
        run: dotnet build UPTSiteTests/UPTSiteTests.csproj --configuration Release --no-restore

      # 5. Crear carpeta nupkg
      - name: Create nupkg folder
        run: mkdir -p ./nupkg

      # 6. Pack NuGet
      - name: Pack NuGet
        run: dotnet pack UPTSiteTests/UPTSiteTests.csproj --configuration Release /p:PackageVersion=${{ env.VERSION }} -o ./nupkg

      # 7. Verificar contenido
      - name: List nupkg folder
        run: ls -la ./nupkg

      # 8. Publicar NuGet en GitHub Packages
      - name: Publish NuGet
        run: dotnet nuget push ./nupkg/*.nupkg --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" --api-key ${{ secrets.GITHUB_TOKEN }}

      # 9. Crear release en GitHub
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          name: Release v${{ env.VERSION }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 10. Subir NuGet al release
      - name: Upload NuGet to release
        uses: softprops/action-gh-release@v1
        with:
          files: ./nupkg/*.nupkg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
